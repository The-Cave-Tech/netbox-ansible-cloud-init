---
- name: Extract hostname from FQDN
  set_fact:
    hostname_only: "{{ inventory_hostname.split('.')[0] }}"

- name : Create /var/snap/microk8s/common directory
  file:
    path: /var/snap/microk8s/common
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create /var/snap/microk8s/common/.microk8s.yaml and make the directory if needed
  template:
    src: microk8s.yaml.j2
    dest: /var/snap/microk8s/common/.microk8s.yaml
    owner: root
    group: root
    mode: '0644'

- name: Install required packages
  apt:
    name: ['snapd', 'curl']
    state: present

- name: Check whether microk8s snap is installed
  shell: snap list | grep microk8s
  register: microk8s_installed
  ignore_errors: true

- name: Install MicroK8s via Snap
  shell: snap install microk8s --classic
  when: microk8s_installed.rc != 0

- name: Wait for the microk8s cluster to be ready
  shell: microk8s status --wait-ready

- name: Get existing nodes in the cluster
  shell: microk8s kubectl get nodes -o json
  register: existing_nodes
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a list of existing node names
  set_fact:
    existing_node_names: "{{ existing_nodes.stdout | from_json | json_query('items[].metadata.name') }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Display existing node names
  debug:
    var: existing_node_names
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a list of non-joined hosts
  set_fact:
    non_joined_hosts: "{{ ansible_play_hosts | map('regex_replace', '^([^.]+)\\..*$', '\\1') | difference(existing_node_names) }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Display non-joined hosts
  debug:
    var: non_joined_hosts
  when: inventory_hostname == ansible_play_hosts[0]

- name: Provision a host in the microk8s cluster
  shell: microk8s add-node --format json
  args:
    executable: /bin/bash
  register: cluster_add_result
  with_items: "{{ non_joined_hosts }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set join url fact
  set_fact:
    join_token: "{{ hostvars[ansible_play_hosts[0]].cluster_add_result.results | selectattr('item', 'equalto', hostname_only) | map(attribute='stdout') | first | from_json | json_query('urls') | first }}"
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Debug the join token
  debug:
    var: join_token
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Join the nodes to the microk8s cluster
  shell: microk8s join {{ join_token }}
  args:
    executable: /bin/bash
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Wait until all nodes appear in the kubernetes cluster as seen from the primary node
  shell: microk8s kubectl get nodes -o json
  register: nodes
  until: (nodes.stdout | from_json | json_query('items[].metadata.name') | difference(existing_node_names) | difference(non_joined_hosts)) | length == 0
  retries: 10
  delay: 10
  when: inventory_hostname == ansible_play_hosts[0]

- name: Add user to MicroK8s group
  user:
    name: "{{ ansible_user }}"
    groups: microk8s
    append: yes

- name: Find what the latest version of kubectl is
  shell: curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt
  register: kubectl_version

- name: Set the fact kubectl_version to the latest version of kubectl
  set_fact:
    kubectl_version: "{{ kubectl_version.stdout }}"

- name: Debug
  debug:
    var: kubectl_version

- name: Check whether kubectl is already installed
  stat:
    path: /usr/local/bin/kubectl
  register: kubectl_installed

- name: If kubectl is already installed find out the installed version number
  shell: kubectl version --client=true -o json
  register: kubectl_version_installed
  when: kubectl_installed.stat.exists

- name: Set the fact kubectl_version_installed to the installed version of kubectl
  set_fact:
    kubectl_version_installed: "{{ kubectl_version_installed.stdout | from_json | json_query('clientVersion.gitVersion') }}"
  when: kubectl_installed.stat.exists

- name: Download kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    mode: '0755'  
  when: not kubectl_installed.stat.exists or kubectl_version_installed != kubectl_version

- name: Check whether kubectl has a bash autocomplete script
  stat:
    path: /etc/bash_completion.d/kubectl
  register: kubectl_bash_completion_installed

- name: Generate a kubectl bash autocomplete script if needed
  shell: kubectl completion bash > /etc/bash_completion.d/kubectl
  when: not kubectl_bash_completion_installed.stat.exists or not kubectl_installed.stat.exists or kubectl_version_installed != kubectl_version

- name: Ensure .kube directory exists for the user
  file:
    path: "/home/user/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy microk8s credentials to user's kubeconfig
  copy:
    src: "/var/snap/microk8s/current/credentials/client.config"
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    remote_src: true


- name: Get a list of enabled addons
  shell: microk8s status --wait-ready --yaml
  register: enabled_addons_result
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set the fact enabled-addons from the enabled addons
  set_fact:
    enabled_addons: "{{ enabled_addons_result.stdout | from_yaml | json_query('addons') }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Debug
  debug:
    var: enabled_addons
  when: inventory_hostname == ansible_play_hosts[0]

- name: Enable rook-ceph addon if it's not already enabled
  shell: microk8s enable rook-ceph
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/rook-ceph"] == "disabled"

- name: Connect to external ceph
  shell: microk8s connect-external-ceph
  when: inventory_hostname == ansible_play_hosts[0]

- name: Wait for the ceph-rbd storage class is available in kubernetes
  shell: microk8s kubectl get storageclass
  register: storage_classes
  until: storage_classes.stdout.find('ceph-rbd') != -1
  retries: 10
  delay: 15
  when: inventory_hostname == ansible_play_hosts[0]

- name: Check whether the default storage class is ceph-rbd
  shell: microk8s kubectl get storageclass ceph-rbd -o json
  register: storage_class
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set the default value of is_ceph_default to false
  set_fact:
    is_ceph_default: false
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set the is_ceph_default fact to the value of the is-default-class annotation if it is present
  set_fact:
    is_ceph_default_from_kube: "{{ storage_class.stdout | from_json | json_query('metadata.annotations.\"storageclass.kubernetes.io/is-default-class\"') }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set the is_ceph_default fact to the value of the is-default-class annotation is_ceph_default_from_kube is not empty
  set_fact:
    is_ceph_default: "{{ is_ceph_default_from_kube }}"
  when: inventory_hostname == ansible_play_hosts[0] and is_ceph_default_from_kube is not none

# - name: Debug
#   debug:
#     var: storage_class.stdout | from_json 
#   when: inventory_hostname == ansible_play_hosts[0]

- name: Debug
  debug:
    var: is_ceph_default
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set default storage class to Ceph RBD
  shell: "microk8s kubectl patch storageclass ceph-rbd -p '{\"metadata\":{\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
  when: inventory_hostname == ansible_play_hosts[0] and is_ceph_default != true 

- name: Enable the ingress addon
  shell: microk8s enable ingress
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/ingress"] == "disabled"

- name: Enable the cert-manager addon
  shell: microk8s enable cert-manager
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/cert-manager"] == "disabled"

# - name: Enable the dashboard addon
#   shell: microk8s enable dashboard
#   when: inventory_hostname == ansible_play_hosts[0] 

# - name: Debug
#   debug:
#     var: dashboard_ingress_host
#   when: inventory_hostname == ansible_play_hosts[0]

# - name: Template the Dashboard Ingress YAML
#   template:
#     src: dashboard_ingress.yaml.j2
#     dest: /tmp/dashboard_ingress.yaml
#   when: inventory_hostname == ansible_play_hosts[0]

# - name: Apply the dashboard ingress
#   shell: microk8s kubectl apply -f /tmp/dashboard_ingress.yaml
#   when: inventory_hostname == ansible_play_hosts[0]

- name: Enable microk8s community addons
  shell: microk8s enable community
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/community"] == "disabled"

- name: Get a list of enabled addons
  shell: microk8s status --wait-ready --yaml
  register: enabled_addons_result
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/community"] == "disabled"

- name: Set the fact enabled-addons from the enabled addons
  set_fact:
    enabled_addons: "{{ enabled_addons_result.stdout | from_yaml | json_query('addons') }}"
  when: inventory_hostname == ansible_play_hosts[0] and enabled_addons["core/community"] == "disabled"

- name: Identify whether the namespace portainer exists
  shell: microk8s kubectl get namespace portainer
  register: portainer_namespace
  ignore_errors: true
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create the portainer namespace if it doesn't already exist
  shell: microk8s kubectl create namespace portainer
  when: inventory_hostname == ansible_play_hosts[0] and portainer_namespace.rc != 0

- name: Identify whether the portainer helm repo is configured
  shell: microk8s helm3 repo list
  register: helm_repos
  when: inventory_hostname == ansible_play_hosts[0]

- name: If the portainer helm repo isn't present add it
  shell: microk8s helm3 repo add portainer https://portainer.github.io/k8s/
  when: inventory_hostname == ansible_play_hosts[0] and helm_repos.stdout.find('portainer') == -1

- name: Update the helm repos
  shell: microk8s helm3 repo update
  when: inventory_hostname == ansible_play_hosts[0] and helm_repos.stdout.find('portainer') == -1

- name: Identify whether portainer is installed by helm
  shell: microk8s helm3 list -A
  register: helm_list
  when: inventory_hostname == ansible_play_hosts[0]

- name: Install portainer if it isn't already installed with ingress at the value in portainer_url
  shell: microk8s helm3 upgrade -i -n portainer portainer portainer/portainer  --set service.type=NodePort --set ingress.enabled=true --set ingress.hosts[0].host={{ portainer_url }} --set ingress.hosts[0].paths[0].path=\/
  when: inventory_hostname == ansible_play_hosts[0] and helm_list.stdout.find('portainer') == -1

- name: Get the kube-config data from microk8s
  shell: microk8s.config
  register: kubeconfig_data

- name: Write the kube-config data to a file
  copy:
    content: "{{ kubeconfig_data.stdout }}"
    dest: "/root/.kube/config"
    owner: root
    group: root
    mode: '0600'

- name: If there is a helm or helm3 file in /snap/bin remove it
  file:
    path: "/snap/bin/{{ item }}"
    state: absent
  with_items: 
  - helm
  - helm3

- name: Check whether helm is currently installed in /usr/local/bin
  stat:
    path: /usr/local/bin/helm
  register: helm_installed

- name: If helm is installed find which version is installed
  shell: helm version --short
  register: helm_version_installed
  when: helm_installed.stat.exists

- name: Set the fact helm_version_installed to the installed version of helm up to but not including the '+' symbol
  set_fact:
    helm_version_installed: "{{ helm_version_installed.stdout.split('+')[0] }}"
  when: helm_installed.stat.exists

- name: Find what the latest version of helm is
  shell: curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r '.tag_name'
  register: helm_version

- name: Set the fact helm_version to the latest version of helm
  set_fact:
    helm_version: "{{ helm_version.stdout }}"

- name: Debug
  debug:
    var: helm_version

- name: Debug the helm version installed
  debug:
    var: helm_version_installed
  when: helm_installed.stat.exists

- name: Download helm
  shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  when: not helm_installed.stat.exists or helm_version_installed != helm_version  

- name: Check whether there is a helm autocomplete script
  stat:
    path: /etc/bash_completion.d/helm
  register: helm_bash_completion_installed

- name: Generate a helm bash autocomplete script if needed
  shell: helm completion bash > /etc/bash_completion.d/helm
  when: not helm_bash_completion_installed.stat.exists

- name: Check whether the helm diff plugin is installed via helm
  shell: /usr/local/bin/helm plugin list
  register: helm_plugins

- name: Install the helm diff plugin if it isn't already installed
  shell: /usr/local/bin/helm plugin install https://github.com/databus23/helm-diff
  when: inventory_hostname == ansible_play_hosts[0] and helm_plugins.stdout.find('diff') == -1