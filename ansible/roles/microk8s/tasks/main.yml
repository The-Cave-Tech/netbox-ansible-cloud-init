---
- name: Extract hostname from FQDN
  set_fact:
    hostname_only: "{{ inventory_hostname.split('.')[0] }}"

- name: Install required packages
  apt:
    name: ['snapd', 'curl']
    state: present

- name: Install MicroK8s via Snap
  shell: snap install microk8s --classic

- name: Wait for the microk8s cluster to be ready
  shell: microk8s status --wait-ready

- name: Get existing nodes in the cluster
  shell: microk8s kubectl get nodes -o json
  register: existing_nodes
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a list of existing node names
  set_fact:
    existing_node_names: "{{ existing_nodes.stdout | from_json | json_query('items[].metadata.name') }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Display existing node names
  debug:
    var: existing_node_names
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a list of non-joined hosts
  set_fact:
    non_joined_hosts: "{{ ansible_play_hosts | map('regex_replace', '^([^.]+)\\..*$', '\\1') | difference(existing_node_names) }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Display non-joined hosts
  debug:
    var: non_joined_hosts
  when: inventory_hostname == ansible_play_hosts[0]

- name: Provision a host in the microk8s cluster
  shell: microk8s add-node --format json
  args:
    executable: /bin/bash
  register: cluster_add_result
  with_items: "{{ non_joined_hosts }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set join url fact
  set_fact:
    join_token: "{{ hostvars[ansible_play_hosts[0]].cluster_add_result.results | selectattr('item', 'equalto', hostname_only) | map(attribute='stdout') | first | from_json | json_query('urls') | first }}"
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Debug the join token
  debug:
    var: join_token
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Join the nodes to the microk8s cluster
  shell: microk8s join {{ join_token }}
  args:
    executable: /bin/bash
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Wait until all nodes appear in the kubernetes cluster as seen from the primary node
  shell: microk8s kubectl get nodes -o json
  register: nodes
  until: (nodes.stdout | from_json | json_query('items[].metadata.name') | difference(existing_node_names) | difference(non_joined_hosts)) | length == 0
  retries: 10
  delay: 10
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a permanent alias for all bash users on the computer for kubectl if one doesn't already exist
  lineinfile:
    path: /etc/bash.bashrc
    line: 'alias kubectl="microk8s kubectl"'
    create: yes

- name: Add user to MicroK8s group
  user:
    name: "{{ ansible_user }}"
    groups: microk8s
    append: yes

- name: Enable rook-ceph addon if it's not already enabled
  shell: microk8s enable rook-ceph
  when: inventory_hostname == ansible_play_hosts[0]

- name: Connect to external ceph
  shell: microk8s connect-external-ceph
  when: inventory_hostname == ansible_play_hosts[0]

- name: Wait for the ceph-rbd storage class is available in kubernetes
  shell: microk8s kubectl get storageclass
  register: storage_classes
  until: storage_classes.stdout.find('ceph-rbd') != -1
  retries: 10
  delay: 15
  when: inventory_hostname == ansible_play_hosts[0]

- name: Check whether the default storage class is ceph-rbd
  shell: microk8s kubectl get storageclass ceph-rbd -o json
  register: storage_class
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set the is_ceph_default fact to the value of the is-default-class annotation
  set_fact:
    is_ceph_default: "{{ storage_class.stdout | from_json | json_query('metadata.annotations.\"storageclass.kubernetes.io/is-default-class\"') }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Debug
  debug:
    var: is_ceph_default
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set default storage class to Ceph RBD
  shell: "microk8s kubectl patch storageclass ceph-rbd -p '{\"metadata\":{\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
  when: inventory_hostname == ansible_play_hosts[0] and is_ceph_default == false 

- name: Enable the dashboard addon
  shell: microk8s enable dashboard
  when: inventory_hostname == ansible_play_hosts[0]

- name: Enable the ingress addon
  shell: microk8s enable ingress
  when: inventory_hostname == ansible_play_hosts[0]

- name: Enable the cert-manager addon
  shell: microk8s enable cert-manager
  when: inventory_hostname == ansible_play_hosts[0]

- name: Debug
  debug:
    var: dashboard_ingress_host
  when: inventory_hostname == ansible_play_hosts[0]

- name: Template the Dashboard Ingress YAML
  template:
    src: dashboard_ingress.yaml.j2
    dest: /tmp/dashboard_ingress.yaml
  when: inventory_hostname == ansible_play_hosts[0]

- name: Apply the dashboard ingress
  shell: microk8s kubectl apply -f /tmp/dashboard_ingress.yaml
  when: inventory_hostname == ansible_play_hosts[0]

