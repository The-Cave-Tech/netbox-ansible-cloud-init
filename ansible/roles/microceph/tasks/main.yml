# roles/deploy_ceph/tasks/main.yml

# Implements the tasks listed on https://github.com/canonical/microceph/blob/main/docs/tutorial/multi-node.rst

---
- name: Extract hostname from FQDN
  set_fact:
    hostname_only: "{{ inventory_hostname.split('.')[0] }}"

# - name: Remove Ceph snap
#   snap:
#     name: microceph
#     state: absent

- name: Install Ceph snap
  snap:
    name: microceph
    state: present

- name: Place Ceph snap on hold
  shell: snap refresh --hold microceph

- name: Check if cluster is bootstrapped
  shell: microceph status
  register: bootstrapped_result
  changed_when: false
  ignore_errors: yes  
  when: inventory_hostname == ansible_play_hosts[0]

- name: Bootstrap microceph cluster (only on primary node)
  shell: microceph cluster bootstrap
  args:
    executable: /bin/bash
  when: inventory_hostname == ansible_play_hosts[0] and bootstrapped_result.rc != 0

- name: Retrieve existing cluster members
  shell: microceph status | grep '^- ' | awk '{print $2}'
  register: existing_members
  changed_when: false
  when: inventory_hostname == ansible_play_hosts[0]

- name: Create a list of non-joined hosts
  set_fact:
    non_joined_hosts: "{{ ansible_play_hosts | map('regex_replace', '^([^.]+)\\..*$', '\\1') | difference(existing_members.stdout_lines) }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Display non-joined hosts
  debug:
    var: non_joined_hosts
  when: inventory_hostname == ansible_play_hosts[0]

- name: Add hosts to microceph cluster
  shell: microceph cluster add {{ item }}
  args:
    executable: /bin/bash
  register: cluster_add_result
  with_items: "{{ non_joined_hosts }}"
  when: inventory_hostname == ansible_play_hosts[0]

- name: Set join_token fact
  set_fact:
    join_token: "{{ hostvars[ansible_play_hosts[0]].cluster_add_result.results | selectattr('item', 'equalto', hostname_only) | map(attribute='stdout') | first }}"
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

# - name: Debug the join_token for the node
#   debug:
#     msg: "{{ join_token }}"
#   when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Join microceph cluster
  shell: microceph cluster join {{ join_token }}
  when: hostname_only in hostvars[ansible_play_hosts[0]].non_joined_hosts

- name: Extract paths of disks
  shell: microceph disk list | grep {{ hostname_only }}
  register: disk_list_output
  changed_when: false
  ignore_errors: yes

- name: Extract paths where hostname matches hostname_only
  set_fact:
    disk_paths: "{{ disk_list_output.stdout_lines | map('regex_replace', '^\\|.*\\|\\s*(.*?)\\s*\\|$', '\\1') | list }}"

- name: Resolve symbolic links to absolute paths
  shell: readlink -f "{{ item }}"
  register: resolved_paths
  with_items: "{{ disk_paths }}"
  when: disk_paths | length > 0

- name: Set default value for resolved_disk_paths
  set_fact:
    resolved_disk_paths: []

- name: Extract stdout from resolved_paths
  set_fact:
    resolved_disk_paths: "{{ resolved_paths.results | map(attribute='stdout') | list }}"
  when: disk_paths | length > 0 

- name: Show disk paths
  debug:
    var: resolved_disk_paths

- name: Show disks that should be present when done
  debug:
    var: ceph_disks

- name: Create a list of disks to be added
  set_fact:
    disks_to_add: "{{ ceph_disks | difference(resolved_disk_paths) }}"

- name: Show disks to add
  debug:
    var: disks_to_add

- name: Add disks to microceph cluster
  shell: microceph disk add {{ item }} --wipe
  with_items: "{{ disks_to_add }}"
  when: disks_to_add | length > 0

# TODO: Add task to remove disks which don't belong

- name: Check if Ceph Dashboard is running
  shell: ceph mgr services
  register: ceph_dashboard_status
  changed_when: false

- name: Enable Ceph Dashboard if not running
  shell: ceph mgr module enable dashboard
  when: "'dashboard' not in ceph_dashboard_status.stdout"

- name: Create self-signed certificate for Ceph Dashboard
  shell: ceph dashboard create-self-signed-cert
  when: "'dashboard' not in ceph_dashboard_status.stdout"

- name: Check if Ceph Dashboard has administrative user
  shell: ceph dashboard ac-user-show {{ ceph_admin_username }}
  register: dashboard_user_info
  changed_when: false
  ignore_errors: true
  when: inventory_hostname == ansible_play_hosts[0] 

- name: Write Ceph password to a temporary file
  copy:
    content: "{{ ceph_admin_password }}\n"
    dest: /root/ceph_password.txt
  when: inventory_hostname == ansible_play_hosts[0] and dashboard_user_info.rc != 0

- name: Create administrative user if not present
  shell: ceph dashboard ac-user-create {{ ceph_admin_username }} -i /root/ceph_password.txt administrator
  when: inventory_hostname == ansible_play_hosts[0] and dashboard_user_info.rc != 0

- name: Remove temporary password file
  file:
    path: /root/ceph_password.txt
    state: absent
#  when: inventory_hostname == ansible_play_hosts[0] and dashboard_user_info.rc != 0

- name: Configure the default pool size
  shell: ceph config set global osd_pool_default_size {{ osd_pool_default_size }}
  changed_when: false

- name: Configure whether to enable standby modules
  shell: ceph config set mgr mgr_standby_modules {{ mgr_standby_modules }}
  changed_when: false

- name: Configure the chooseleaf type
  shell: ceph config set osd osd_crush_chooseleaf_type {{ osd_crush_chooseleaf_type }}
  changed_when: false

- name: Create systemd service file for Ceph OSD
  copy:
    dest: /etc/systemd/system/rbd-kmod.service
    content: |
      [Unit]
      Description=Load Ceph RBD kernel module
      After=network.target

      [Service]
      Type=oneshot
      ExecStart=/sbin/modprobe rbd

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to recognize Ceph RBD service
  systemd:
    daemon_reload: yes

- name: Enable Ceph RBD service to start on boot
  systemd:
    name: rbd-kmod
    enabled: yes

- name: Start Ceph RBD service
  systemd:
    name: rbd-kmod
    state: started